function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import classNames from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import useScrollToEnd from '../hooks/useScrollToEnd';
import useSticky from '../hooks/useSticky';
import useStyleToClassName from '../hooks/internal/useStyleToClassName';
var ROOT_STYLE = {
  backgroundColor: 'rgba(0, 0, 0, .2)',
  borderRadius: 10,
  borderWidth: 0,
  bottom: 5,
  cursor: 'pointer',
  height: 20,
  outline: 0,
  position: 'absolute',
  right: 20,
  width: 20,
  '&:hover': {
    backgroundColor: 'rgba(0, 0, 0, .4)'
  },
  '&:active': {
    backgroundColor: 'rgba(0, 0, 0, .6)'
  }
};

var AutoHideFollowButton = function AutoHideFollowButton(_ref) {
  var children = _ref.children,
      className = _ref.className;

  var _useSticky = useSticky(),
      _useSticky2 = _slicedToArray(_useSticky, 1),
      sticky = _useSticky2[0];

  var rootCSS = useStyleToClassName()(ROOT_STYLE);
  var scrollToEnd = useScrollToEnd();
  return !sticky && /*#__PURE__*/React.createElement("button", {
    className: classNames(rootCSS, (className || '') + ''),
    onClick: scrollToEnd,
    type: "button"
  }, children);
};

AutoHideFollowButton.defaultProps = {
  children: undefined,
  className: ''
};
AutoHideFollowButton.propTypes = {
  children: PropTypes.any,
  className: PropTypes.string
};
export default AutoHideFollowButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TY3JvbGxUb0JvdHRvbS9BdXRvSGlkZUZvbGxvd0J1dHRvbi5qcyJdLCJuYW1lcyI6WyJjbGFzc05hbWVzIiwiUHJvcFR5cGVzIiwiUmVhY3QiLCJ1c2VTY3JvbGxUb0VuZCIsInVzZVN0aWNreSIsInVzZVN0eWxlVG9DbGFzc05hbWUiLCJST09UX1NUWUxFIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyV2lkdGgiLCJib3R0b20iLCJjdXJzb3IiLCJoZWlnaHQiLCJvdXRsaW5lIiwicG9zaXRpb24iLCJyaWdodCIsIndpZHRoIiwiQXV0b0hpZGVGb2xsb3dCdXR0b24iLCJjaGlsZHJlbiIsImNsYXNzTmFtZSIsInN0aWNreSIsInJvb3RDU1MiLCJzY3JvbGxUb0VuZCIsImRlZmF1bHRQcm9wcyIsInVuZGVmaW5lZCIsInByb3BUeXBlcyIsImFueSIsInN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsT0FBT0EsVUFBUCxNQUF1QixZQUF2QjtBQUNBLE9BQU9DLFNBQVAsTUFBc0IsWUFBdEI7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCO0FBRUEsT0FBT0MsY0FBUCxNQUEyQix5QkFBM0I7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLG9CQUF0QjtBQUNBLE9BQU9DLG1CQUFQLE1BQWdDLHVDQUFoQztBQUVBLElBQU1DLFVBQVUsR0FBRztBQUNqQkMsRUFBQUEsZUFBZSxFQUFFLG1CQURBO0FBRWpCQyxFQUFBQSxZQUFZLEVBQUUsRUFGRztBQUdqQkMsRUFBQUEsV0FBVyxFQUFFLENBSEk7QUFJakJDLEVBQUFBLE1BQU0sRUFBRSxDQUpTO0FBS2pCQyxFQUFBQSxNQUFNLEVBQUUsU0FMUztBQU1qQkMsRUFBQUEsTUFBTSxFQUFFLEVBTlM7QUFPakJDLEVBQUFBLE9BQU8sRUFBRSxDQVBRO0FBUWpCQyxFQUFBQSxRQUFRLEVBQUUsVUFSTztBQVNqQkMsRUFBQUEsS0FBSyxFQUFFLEVBVFU7QUFVakJDLEVBQUFBLEtBQUssRUFBRSxFQVZVO0FBWWpCLGFBQVc7QUFDVFQsSUFBQUEsZUFBZSxFQUFFO0FBRFIsR0FaTTtBQWdCakIsY0FBWTtBQUNWQSxJQUFBQSxlQUFlLEVBQUU7QUFEUDtBQWhCSyxDQUFuQjs7QUFxQkEsSUFBTVUsb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUF1QixPQUE2QjtBQUFBLE1BQTFCQyxRQUEwQixRQUExQkEsUUFBMEI7QUFBQSxNQUFoQkMsU0FBZ0IsUUFBaEJBLFNBQWdCOztBQUFBLG1CQUN2Q2YsU0FBUyxFQUQ4QjtBQUFBO0FBQUEsTUFDakRnQixNQURpRDs7QUFFeEQsTUFBTUMsT0FBTyxHQUFHaEIsbUJBQW1CLEdBQUdDLFVBQUgsQ0FBbkM7QUFDQSxNQUFNZ0IsV0FBVyxHQUFHbkIsY0FBYyxFQUFsQztBQUVBLFNBQ0UsQ0FBQ2lCLE1BQUQsaUJBQ0U7QUFBUSxJQUFBLFNBQVMsRUFBRXBCLFVBQVUsQ0FBQ3FCLE9BQUQsRUFBVSxDQUFDRixTQUFTLElBQUksRUFBZCxJQUFvQixFQUE5QixDQUE3QjtBQUFnRSxJQUFBLE9BQU8sRUFBRUcsV0FBekU7QUFBc0YsSUFBQSxJQUFJLEVBQUM7QUFBM0YsS0FDR0osUUFESCxDQUZKO0FBT0QsQ0FaRDs7QUFjQUQsb0JBQW9CLENBQUNNLFlBQXJCLEdBQW9DO0FBQ2xDTCxFQUFBQSxRQUFRLEVBQUVNLFNBRHdCO0FBRWxDTCxFQUFBQSxTQUFTLEVBQUU7QUFGdUIsQ0FBcEM7QUFLQUYsb0JBQW9CLENBQUNRLFNBQXJCLEdBQWlDO0FBQy9CUCxFQUFBQSxRQUFRLEVBQUVqQixTQUFTLENBQUN5QixHQURXO0FBRS9CUCxFQUFBQSxTQUFTLEVBQUVsQixTQUFTLENBQUMwQjtBQUZVLENBQWpDO0FBS0EsZUFBZVYsb0JBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdXNlU2Nyb2xsVG9FbmQgZnJvbSAnLi4vaG9va3MvdXNlU2Nyb2xsVG9FbmQnO1xuaW1wb3J0IHVzZVN0aWNreSBmcm9tICcuLi9ob29rcy91c2VTdGlja3knO1xuaW1wb3J0IHVzZVN0eWxlVG9DbGFzc05hbWUgZnJvbSAnLi4vaG9va3MvaW50ZXJuYWwvdXNlU3R5bGVUb0NsYXNzTmFtZSc7XG5cbmNvbnN0IFJPT1RfU1RZTEUgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgLjIpJyxcbiAgYm9yZGVyUmFkaXVzOiAxMCxcbiAgYm9yZGVyV2lkdGg6IDAsXG4gIGJvdHRvbTogNSxcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGhlaWdodDogMjAsXG4gIG91dGxpbmU6IDAsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICByaWdodDogMjAsXG4gIHdpZHRoOiAyMCxcblxuICAnJjpob3Zlcic6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIC40KSdcbiAgfSxcblxuICAnJjphY3RpdmUnOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAuNiknXG4gIH1cbn07XG5cbmNvbnN0IEF1dG9IaWRlRm9sbG93QnV0dG9uID0gKHsgY2hpbGRyZW4sIGNsYXNzTmFtZSB9KSA9PiB7XG4gIGNvbnN0IFtzdGlja3ldID0gdXNlU3RpY2t5KCk7XG4gIGNvbnN0IHJvb3RDU1MgPSB1c2VTdHlsZVRvQ2xhc3NOYW1lKCkoUk9PVF9TVFlMRSk7XG4gIGNvbnN0IHNjcm9sbFRvRW5kID0gdXNlU2Nyb2xsVG9FbmQoKTtcblxuICByZXR1cm4gKFxuICAgICFzdGlja3kgJiYgKFxuICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e2NsYXNzTmFtZXMocm9vdENTUywgKGNsYXNzTmFtZSB8fCAnJykgKyAnJyl9IG9uQ2xpY2s9e3Njcm9sbFRvRW5kfSB0eXBlPVwiYnV0dG9uXCI+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvYnV0dG9uPlxuICAgIClcbiAgKTtcbn07XG5cbkF1dG9IaWRlRm9sbG93QnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46IHVuZGVmaW5lZCxcbiAgY2xhc3NOYW1lOiAnJ1xufTtcblxuQXV0b0hpZGVGb2xsb3dCdXR0b24ucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBdXRvSGlkZUZvbGxvd0J1dHRvbjtcbiJdfQ==