"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _AutoHideFollowButton = _interopRequireDefault(require("./ScrollToBottom/AutoHideFollowButton"));

var _Composer = _interopRequireDefault(require("./ScrollToBottom/Composer"));

var _Panel = _interopRequireDefault(require("./ScrollToBottom/Panel"));

var _useStyleToClassName = _interopRequireDefault(require("./hooks/internal/useStyleToClassName"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ROOT_STYLE = {
  position: 'relative'
};

var BasicScrollToBottomCore = function BasicScrollToBottomCore(_ref) {
  var children = _ref.children,
      className = _ref.className,
      followButtonClassName = _ref.followButtonClassName,
      scrollViewClassName = _ref.scrollViewClassName;
  var rootCSS = (0, _useStyleToClassName.default)()(ROOT_STYLE);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(rootCSS, (className || '') + '')
  }, /*#__PURE__*/_react.default.createElement(_Panel.default, {
    className: (scrollViewClassName || '') + ''
  }, children), /*#__PURE__*/_react.default.createElement(_AutoHideFollowButton.default, {
    className: (followButtonClassName || '') + ''
  }));
};

BasicScrollToBottomCore.defaultProps = {
  children: undefined,
  className: undefined,
  followButtonClassName: undefined,
  scrollViewClassName: undefined
};
BasicScrollToBottomCore.propTypes = {
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  followButtonClassName: _propTypes.default.string,
  scrollViewClassName: _propTypes.default.string
};

var BasicScrollToBottom = function BasicScrollToBottom(_ref2) {
  var checkInterval = _ref2.checkInterval,
      children = _ref2.children,
      className = _ref2.className,
      debounce = _ref2.debounce,
      debug = _ref2.debug,
      followButtonClassName = _ref2.followButtonClassName,
      initialScrollBehavior = _ref2.initialScrollBehavior,
      mode = _ref2.mode,
      nonce = _ref2.nonce,
      scroller = _ref2.scroller,
      scrollViewClassName = _ref2.scrollViewClassName;
  return /*#__PURE__*/_react.default.createElement(_Composer.default, {
    checkInterval: checkInterval,
    debounce: debounce,
    debug: debug,
    initialScrollBehavior: initialScrollBehavior,
    mode: mode,
    nonce: nonce,
    scroller: scroller
  }, /*#__PURE__*/_react.default.createElement(BasicScrollToBottomCore, {
    className: className,
    followButtonClassName: followButtonClassName,
    scrollViewClassName: scrollViewClassName
  }, children));
};

BasicScrollToBottom.defaultProps = {
  checkInterval: undefined,
  children: undefined,
  className: undefined,
  debounce: undefined,
  debug: undefined,
  followButtonClassName: undefined,
  initialScrollBehavior: 'smooth',
  mode: undefined,
  nonce: undefined,
  scrollViewClassName: undefined
};
BasicScrollToBottom.propTypes = {
  checkInterval: _propTypes.default.number,
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  debounce: _propTypes.default.number,
  debug: _propTypes.default.bool,
  followButtonClassName: _propTypes.default.string,
  initialScrollBehavior: _propTypes.default.oneOf(['auto', 'smooth']),
  mode: _propTypes.default.oneOf(['bottom', 'top']),
  nonce: _propTypes.default.string,
  scrollViewClassName: _propTypes.default.string
};
var _default = BasicScrollToBottom;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9CYXNpY1Njcm9sbFRvQm90dG9tLmpzIl0sIm5hbWVzIjpbIlJPT1RfU1RZTEUiLCJwb3NpdGlvbiIsIkJhc2ljU2Nyb2xsVG9Cb3R0b21Db3JlIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJmb2xsb3dCdXR0b25DbGFzc05hbWUiLCJzY3JvbGxWaWV3Q2xhc3NOYW1lIiwicm9vdENTUyIsImRlZmF1bHRQcm9wcyIsInVuZGVmaW5lZCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImFueSIsInN0cmluZyIsIkJhc2ljU2Nyb2xsVG9Cb3R0b20iLCJjaGVja0ludGVydmFsIiwiZGVib3VuY2UiLCJkZWJ1ZyIsImluaXRpYWxTY3JvbGxCZWhhdmlvciIsIm1vZGUiLCJub25jZSIsInNjcm9sbGVyIiwibnVtYmVyIiwiYm9vbCIsIm9uZU9mIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxVQUFVLEdBQUc7QUFDakJDLEVBQUFBLFFBQVEsRUFBRTtBQURPLENBQW5COztBQUlBLElBQU1DLHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBMEIsT0FBeUU7QUFBQSxNQUF0RUMsUUFBc0UsUUFBdEVBLFFBQXNFO0FBQUEsTUFBNURDLFNBQTRELFFBQTVEQSxTQUE0RDtBQUFBLE1BQWpEQyxxQkFBaUQsUUFBakRBLHFCQUFpRDtBQUFBLE1BQTFCQyxtQkFBMEIsUUFBMUJBLG1CQUEwQjtBQUN2RyxNQUFNQyxPQUFPLEdBQUcsb0NBQXNCUCxVQUF0QixDQUFoQjtBQUVBLHNCQUNFO0FBQUssSUFBQSxTQUFTLEVBQUUseUJBQVdPLE9BQVgsRUFBb0IsQ0FBQ0gsU0FBUyxJQUFJLEVBQWQsSUFBb0IsRUFBeEM7QUFBaEIsa0JBQ0UsNkJBQUMsY0FBRDtBQUFPLElBQUEsU0FBUyxFQUFFLENBQUNFLG1CQUFtQixJQUFJLEVBQXhCLElBQThCO0FBQWhELEtBQXFESCxRQUFyRCxD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Q0FQTztBQVE5QkwsRUFBQUEsSUFBSSxFQUFFUixtQkFBVWEsS0FBVixDQUFnQixDQUFDLFFBQUQsRUFBVyxLQUFYLENBQWhCLENBUndCO0FBUzlCSixFQUFBQSxLQUFLLEVBQUVULG1CQUFVRSxNQVRhO0FBVTlCUCxFQUFBQSxtQkFBbUIsRUFBRUssbUJBQVVFO0FBVkQsQ0FBaEM7ZUFhZUMsbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgQXV0b0hpZGVGb2xsb3dCdXR0b24gZnJvbSAnLi9TY3JvbGxUb0JvdHRvbS9BdXRvSGlkZUZvbGxvd0J1dHRvbic7XG5pbXBvcnQgQ29tcG9zZXIgZnJvbSAnLi9TY3JvbGxUb0JvdHRvbS9Db21wb3Nlcic7XG5pbXBvcnQgUGFuZWwgZnJvbSAnLi9TY3JvbGxUb0JvdHRvbS9QYW5lbCc7XG5pbXBvcnQgdXNlU3R5bGVUb0NsYXNzTmFtZSBmcm9tICcuL2hvb2tzL2ludGVybmFsL3VzZVN0eWxlVG9DbGFzc05hbWUnO1xuXG5jb25zdCBST09UX1NUWUxFID0ge1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufTtcblxuY29uc3QgQmFzaWNTY3JvbGxUb0JvdHRvbUNvcmUgPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBmb2xsb3dCdXR0b25DbGFzc05hbWUsIHNjcm9sbFZpZXdDbGFzc05hbWUgfSkgPT4ge1xuICBjb25zdCByb290Q1NTID0gdXNlU3R5bGVUb0NsYXNzTmFtZSgpKFJPT1RfU1RZTEUpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMocm9vdENTUywgKGNsYXNzTmFtZSB8fCAnJykgKyAnJyl9PlxuICAgICAgPFBhbmVsIGNsYXNzTmFtZT17KHNjcm9sbFZpZXdDbGFzc05hbWUgfHwgJycpICsgJyd9PntjaGlsZHJlbn08L1BhbmVsPlxuICAgICAgPEF1dG9IaWRlRm9sbG93QnV0dG9uIGNsYXNzTmFtZT17KGZvbGxvd0J1dHRvbkNsYXNzTmFtZSB8fCAnJykgKyAnJ30gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbkJhc2ljU2Nyb2xsVG9Cb3R0b21Db3JlLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46IHVuZGVmaW5lZCxcbiAgY2xhc3NOYW1lOiB1bmRlZmluZWQsXG4gIGZvbGxvd0J1dHRvbkNsYXNzTmFtZTogdW5kZWZpbmVkLFxuICBzY3JvbGxWaWV3Q2xhc3NOYW1lOiB1bmRlZmluZWRcbn07XG5cbkJhc2ljU2Nyb2xsVG9Cb3R0b21Db3JlLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9sbG93QnV0dG9uQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzY3JvbGxWaWV3Q2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5jb25zdCBCYXNpY1Njcm9sbFRvQm90dG9tID0gKHtcbiAgY2hlY2tJbnRlcnZhbCxcbiAgY2hpbGRyZW4sXG4gIGNsYXNzTmFtZSxcbiAgZGVib3VuY2UsXG4gIGRlYnVnLFxuICBmb2xsb3dCdXR0b25DbGFzc05hbWUsXG4gIGluaXRpYWxTY3JvbGxCZWhhdmlvcixcbiAgbW9kZSxcbiAgbm9uY2UsXG4gIHNjcm9sbGVyLFxuICBzY3JvbGxWaWV3Q2xhc3NOYW1lXG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPENvbXBvc2VyXG4gICAgICBjaGVja0ludGVydmFsPXtjaGVja0ludGVydmFsfVxuICAgICAgZGVib3VuY2U9e2RlYm91bmNlfVxuICAgICAgZGVidWc9e2RlYnVnfVxuICAgICAgaW5pdGlhbFNjcm9sbEJlaGF2aW9yPXtpbml0aWFsU2Nyb2xsQmVoYXZpb3J9XG4gICAgICBtb2RlPXttb2RlfVxuICAgICAgbm9uY2U9e25vbmNlfVxuICAgICAgc2Nyb2xsZXI9e3Njcm9sbGVyfVxuICAgID5cbiAgICAgIDxCYXNpY1Njcm9sbFRvQm90dG9tQ29yZVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgZm9sbG93QnV0dG9uQ2xhc3NOYW1lPXtmb2xsb3dCdXR0b25DbGFzc05hbWV9XG4gICAgICAgIHNjcm9sbFZpZXdDbGFzc05hbWU9e3Njcm9sbFZpZXdDbGFzc05hbWV9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvQmFzaWNTY3JvbGxUb0JvdHRvbUNvcmU+XG4gICAgPC9Db21wb3Nlcj5cbiAgKTtcbn07XG5cbkJhc2ljU2Nyb2xsVG9Cb3R0b20uZGVmYXVsdFByb3BzID0ge1xuICBjaGVja0ludGVydmFsOiB1bmRlZmluZWQsXG4gIGNoaWxkcmVuOiB1bmRlZmluZWQsXG4gIGNsYXNzTmFtZTogdW5kZWZpbmVkLFxuICBkZWJvdW5jZTogdW5kZWZpbmVkLFxuICBkZWJ1ZzogdW5kZWZpbmVkLFxuICBmb2xsb3dCdXR0b25DbGFzc05hbWU6IHVuZGVmaW5lZCxcbiAgaW5pdGlhbFNjcm9sbEJlaGF2aW9yOiAnc21vb3RoJyxcbiAgbW9kZTogdW5kZWZpbmVkLFxuICBub25jZTogdW5kZWZpbmVkLFxuICBzY3JvbGxWaWV3Q2xhc3NOYW1lOiB1bmRlZmluZWRcbn07XG5cbkJhc2ljU2Nyb2xsVG9Cb3R0b20ucHJvcFR5cGVzID0ge1xuICBjaGVja0ludGVydmFsOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBkZWJvdW5jZTogUHJvcFR5cGVzLm51bWJlcixcbiAgZGVidWc6IFByb3BUeXBlcy5ib29sLFxuICBmb2xsb3dCdXR0b25DbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGluaXRpYWxTY3JvbGxCZWhhdmlvcjogUHJvcFR5cGVzLm9uZU9mKFsnYXV0bycsICdzbW9vdGgnXSksXG4gIG1vZGU6IFByb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICd0b3AnXSksXG4gIG5vbmNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzY3JvbGxWaWV3Q2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCYXNpY1Njcm9sbFRvQm90dG9tO1xuIl19