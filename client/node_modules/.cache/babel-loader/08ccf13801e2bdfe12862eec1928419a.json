{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/chichi/Desktop/cs510-course-project/client/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css'; // Note: Make sure every .css have different component classNames\n\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport TextContainer from '../TextContainer/TextContainer';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [university, setUniversity] = useState('');\n  const [course, setCourse] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  /**\n   * User connects to server and join room\n  */\n\n  useEffect(() => {\n    const {\n      name,\n      room,\n      university,\n      course\n    } = queryString.parse(location.search);\n    console.log(name, room, university, course);\n    var roomName = `${university}-${course}-${room}`;\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(roomName);\n    setUniversity(university);\n    setCourse(course);\n    socket.emit('join', {\n      name,\n      room: roomName\n    }, () => {// alert(error);\n    }); // Receive server message\n\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]);\n      socket.on(\"roomData\", ({\n        users\n      }) => {\n        setUsers(users);\n      });\n    });\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]); // only re-connect when server or URL changed\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => {\n        setMessage('');\n      });\n    }\n  };\n\n  const getUserInfo = name => {\n    if (name) {\n      socket.emit('getUser', {\n        name\n      }, message => {\n        console.log(\"Get User:\", message);\n      });\n    }\n  };\n\n  const likeCourse = (username, university, course) => {\n    if (!username || !course || !university) {\n      return;\n    }\n\n    socket.emit('likeCourse', {\n      name: username,\n      course,\n      university\n    }, message => {\n      console.log(\"likeCourse: \", message);\n    });\n  };\n\n  const unlikeCourse = (username, university, course) => {\n    if (!username || !course || !university) {\n      return;\n    }\n\n    socket.emit('unlikeCourse', {\n      name: username,\n      course,\n      university\n    }, message => {\n      console.log(\"unlike Course: \", message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: room,\n        university: university,\n        course: course,\n        likeCourse: likeCourse,\n        unlikeCourse: unlikeCourse,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users,\n      getUserInfo: getUserInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"eSpIigU+XhMivja0ugNRBB8WDws=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/chichi/Desktop/cs510-course-project/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","Input","Messages","TextContainer","socket","Chat","location","name","setName","room","setRoom","university","setUniversity","course","setCourse","message","setMessage","messages","setMessages","users","setUsers","ENDPOINT","parse","search","console","log","roomName","emit","on","off","sendMessage","event","preventDefault","getUserInfo","likeCourse","username","unlikeCourse"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nimport './Chat.css'; // Note: Make sure every .css have different component classNames\n\nimport InfoBar from '../InfoBar/InfoBar'\nimport Input from '../Input/Input'\nimport Messages from '../Messages/Messages'\nimport TextContainer from '../TextContainer/TextContainer'\n\nlet socket; \n\n\nconst Chat = ({ location }) => {\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [university, setUniversity] = useState('');\n    const [course, setCourse] = useState('');\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [users, setUsers] = useState([]);\n    const ENDPOINT = 'localhost:5000';\n\n    /**\n     * User connects to server and join room\n    */\n    useEffect(() => {\n        const { name, room, university, course } = queryString.parse(location.search);\n        console.log(name, room, university, course);\n        var roomName = `${university}-${course}-${room}`;\n\n        socket = io(ENDPOINT);\n\n        setName(name);\n        setRoom(roomName);\n        setUniversity(university);\n        setCourse(course);\n        \n        socket.emit('join', { name, room: roomName }, () => {\n            // alert(error);\n        } );\n\n        // Receive server message\n        socket.on('message', (message) => { \n            setMessages(messages => [...messages, message]);\n            socket.on(\"roomData\", ({ users }) => {\n                setUsers(users);\n              });\n        });\n\n        return () => {\n            socket.emit('disconnect');\n            socket.off();\n        }\n    }, [ENDPOINT, location.search]); // only re-connect when server or URL changed\n    \n\n    const sendMessage = (event) => {\n        event.preventDefault();\n        if (message) {\n            socket.emit('sendMessage', message, () => {setMessage('')});\n        }\n    }\n\n    const getUserInfo = (name) => {\n        if (name) {\n            socket.emit('getUser', { name }, (message) => {\n                 console.log(\"Get User:\", message);\n            });\n        }\n    }\n\n    const likeCourse = (username, university, course) => {\n        if (!username || !course || !university) {\n            return;\n        }\n        socket.emit('likeCourse', { name: username, course, university }, (message) => {\n            console.log(\"likeCourse: \", message);\n        })\n    }\n\n    const unlikeCourse = (username, university, course) => {\n        if (!username || !course || !university) {\n            return;\n        }\n        socket.emit('unlikeCourse', { name: username, course, university }, (message) => {\n            console.log(\"unlike Course: \", message);\n        })\n    }\n\n    return (\n        <div className=\"outerContainer\">\n            <div className=\"container\">\n                <InfoBar room={room} university={university} course={course} likeCourse={likeCourse} unlikeCourse={unlikeCourse} name={name}/>\n                <Messages messages={messages} name={name}/>\n                <Input message={message} setMessage={setMessage} sendMessage={sendMessage}/>\n            </div>\n            <TextContainer users={users} getUserInfo={getUserInfo}/>\n        </div>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}