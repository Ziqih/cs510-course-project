{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n/* eslint no-console: [\"off\"] */\n\n\nimport styleConsole from './styleConsole';\n\nfunction format(category, arg0) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  return [\"%c\".concat(category, \"%c \").concat(arg0)].concat(_toConsumableArray(styleConsole('green', 'white')), args);\n}\n\nexport default function debug(category) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$force = _ref.force,\n      force = _ref$force === void 0 ? false : _ref$force;\n\n  if (!force) {\n    return function () {\n      return 0;\n    };\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (!args.length) {\n      return;\n    }\n\n    var _args = args,\n        _args2 = _slicedToArray(_args, 1),\n        arg0 = _args2[0];\n\n    if (typeof arg0 === 'function') {\n      args = arg0();\n    }\n\n    var lines = Array.isArray(args[0]) ? args : [args];\n    var oneLiner = lines.length === 1;\n    lines.forEach(function (line, index) {\n      if (oneLiner) {\n        var _console;\n\n        (_console = console).log.apply(_console, _toConsumableArray(format.apply(void 0, [category].concat(_toConsumableArray(line)))));\n      } else if (index) {\n        var _console2;\n\n        (_console2 = console).log.apply(_console2, _toConsumableArray(Array.isArray(line) ? line : [line]));\n      } else {\n        var _console3;\n\n        (_console3 = console).groupCollapsed.apply(_console3, _toConsumableArray(format.apply(void 0, [category].concat(_toConsumableArray(line)))));\n      }\n    });\n    oneLiner || console.groupEnd();\n  };\n}","map":{"version":3,"sources":["../../../src/utils/debug.js"],"names":["args","styleConsole","force","arg0","lines","Array","oneLiner","format","console"],"mappings":"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","sourcesContent":["/* eslint no-console: [\"off\"] */\n\nimport styleConsole from './styleConsole';\n\nfunction format(category, arg0, ...args) {\n  return [`%c${category}%c ${arg0}`, ...styleConsole('green', 'white'), ...args];\n}\n\nexport default function debug(category, { force = false } = {}) {\n  if (!force) {\n    return () => 0;\n  }\n\n  return (...args) => {\n    if (!args.length) {\n      return;\n    }\n\n    const [arg0] = args;\n\n    if (typeof arg0 === 'function') {\n      args = arg0();\n    }\n\n    const lines = Array.isArray(args[0]) ? args : [args];\n    const oneLiner = lines.length === 1;\n\n    lines.forEach((line, index) => {\n      if (oneLiner) {\n        console.log(...format(category, ...line));\n      } else if (index) {\n        console.log(...(Array.isArray(line) ? line : [line]));\n      } else {\n        console.groupCollapsed(...format(category, ...line));\n      }\n    });\n\n    oneLiner || console.groupEnd();\n  };\n}\n"]},"metadata":{},"sourceType":"module"}